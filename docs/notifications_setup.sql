-- ========================================
-- CONFIGURA√á√ÉO DO SISTEMA DE NOTIFICA√á√ïES
-- ========================================
-- Execute este SQL no Supabase SQL Editor

-- 1. HABILITAR REALTIME NA TABELA
-- ========================================
-- No Supabase Dashboard:
-- 1. V√° em "Database" > "Replication"
-- 2. Encontre a tabela "notifications"
-- 3. Habilite o toggle de Realtime
-- OU execute via SQL:

ALTER PUBLICATION supabase_realtime ADD TABLE notifications;

-- 2. CRIAR √çNDICES PARA PERFORMANCE
-- ========================================

-- √çndice para buscar notifica√ß√µes de um usu√°rio
CREATE INDEX IF NOT EXISTS idx_notifications_user_id 
ON notifications(user_id) 
WHERE audience = 'user';

-- √çndice para buscar notifica√ß√µes globais
CREATE INDEX IF NOT EXISTS idx_notifications_audience 
ON notifications(audience) 
WHERE audience = 'all';

-- √çndice para buscar n√£o lidas
CREATE INDEX IF NOT EXISTS idx_notifications_is_read 
ON notifications(is_read) 
WHERE is_read = false;

-- √çndice para ordena√ß√£o por data
CREATE INDEX IF NOT EXISTS idx_notifications_created_at 
ON notifications(created_at DESC);

-- √çndice composto para query principal (usu√°rio + n√£o lidas)
CREATE INDEX IF NOT EXISTS idx_notifications_user_unread 
ON notifications(user_id, is_read, created_at DESC) 
WHERE audience = 'user';

-- 3. HABILITAR ROW LEVEL SECURITY (RLS)
-- ========================================

ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- 4. CRIAR POL√çTICAS RLS
-- ========================================

-- Pol√≠tica de SELECT: Usu√°rio v√™ suas notifica√ß√µes OU notifica√ß√µes globais
DROP POLICY IF EXISTS "Users can view their notifications" ON notifications;

CREATE POLICY "Users can view their notifications"
ON notifications
FOR SELECT
USING (
  -- Notifica√ß√µes do usu√°rio espec√≠fico
  (audience = 'user' AND auth.uid()::text = auth_user_id)
  OR
  -- Notifica√ß√µes globais
  (audience = 'all')
);

-- Pol√≠tica de UPDATE: Usu√°rio s√≥ atualiza suas pr√≥prias notifica√ß√µes
DROP POLICY IF EXISTS "Users can update their notifications" ON notifications;

CREATE POLICY "Users can update their notifications"
ON notifications
FOR UPDATE
USING (auth.uid()::text = auth_user_id AND audience = 'user')
WITH CHECK (auth.uid()::text = auth_user_id AND audience = 'user');

-- Pol√≠tica de DELETE: Usu√°rio s√≥ deleta suas pr√≥prias notifica√ß√µes
DROP POLICY IF EXISTS "Users can delete their notifications" ON notifications;

CREATE POLICY "Users can delete their notifications"
ON notifications
FOR DELETE
USING (auth.uid()::text = auth_user_id AND audience = 'user');

-- Pol√≠tica de INSERT: Sistema pode criar notifica√ß√µes (service_role)
-- Nota: Esta pol√≠tica deve ser mais restritiva em produ√ß√£o
DROP POLICY IF EXISTS "Service role can insert notifications" ON notifications;

CREATE POLICY "Service role can insert notifications"
ON notifications
FOR INSERT
WITH CHECK (true); -- ‚Üê Em produ√ß√£o, adicionar restri√ß√µes aqui

-- 5. CRIAR FUNCTION PARA AUTO-ATUALIZAR updated_at
-- ========================================

CREATE OR REPLACE FUNCTION update_notifications_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 6. CRIAR TRIGGER PARA AUTO-ATUALIZAR updated_at
-- ========================================

DROP TRIGGER IF EXISTS trigger_notifications_updated_at ON notifications;

CREATE TRIGGER trigger_notifications_updated_at
BEFORE UPDATE ON notifications
FOR EACH ROW
EXECUTE FUNCTION update_notifications_updated_at();

-- 7. INSERIR DOM√çNIOS DE TIPO DE NOTIFICA√á√ÉO (se n√£o existirem)
-- ========================================

-- Verificar se j√° existem
DO $$
BEGIN
  -- Inserir tipos de notifica√ß√£o se n√£o existirem
  IF NOT EXISTS (
    SELECT 1 FROM domains 
    WHERE type = 'notification_type' AND value = 'info'
  ) THEN
    INSERT INTO domains (type, value, description, is_active)
    VALUES ('notification_type', 'info', 'Notifica√ß√£o informativa', true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM domains 
    WHERE type = 'notification_type' AND value = 'success'
  ) THEN
    INSERT INTO domains (type, value, description, is_active)
    VALUES ('notification_type', 'success', 'Notifica√ß√£o de sucesso', true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM domains 
    WHERE type = 'notification_type' AND value = 'warning'
  ) THEN
    INSERT INTO domains (type, value, description, is_active)
    VALUES ('notification_type', 'warning', 'Notifica√ß√£o de aviso', true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM domains 
    WHERE type = 'notification_type' AND value = 'error'
  ) THEN
    INSERT INTO domains (type, value, description, is_active)
    VALUES ('notification_type', 'error', 'Notifica√ß√£o de erro', true);
  END IF;
END $$;

-- 8. CRIAR NOTIFICA√á√ÉO DE TESTE (OPCIONAL)
-- ========================================

-- Descomente e execute para testar (substitua 'USER_ID_AQUI' pelo ID real)
/*
INSERT INTO notifications (
  title, 
  message, 
  type_id, 
  type, 
  audience, 
  auth_user_id, 
  link_url,
  source_type
)
SELECT 
  'Bem-vindo ao Sistema de Notifica√ß√µes! üéâ',
  'Este √© um exemplo de notifica√ß√£o em tempo real. Clique para explorar o dashboard.',
  id,
  'success',
  'user',
  'USER_ID_AQUI', -- ‚Üê Substituir pelo auth_user_id real
  '/dashboard',
  'system'
FROM domains
WHERE type = 'notification_type' AND value = 'success'
LIMIT 1;
*/

-- 9. CRIAR NOTIFICA√á√ÉO GLOBAL DE TESTE (OPCIONAL)
-- ========================================

-- Descomente para testar notifica√ß√£o global
/*
INSERT INTO notifications (
  title, 
  message, 
  type_id, 
  type, 
  audience,
  source_type
)
SELECT 
  'üì¢ An√∫ncio para Todos',
  'Esta √© uma notifica√ß√£o global que todos os usu√°rios receber√£o em tempo real!',
  id,
  'info',
  'all',
  'system'
FROM domains
WHERE type = 'notification_type' AND value = 'info'
LIMIT 1;
*/

-- 10. VERIFICAR CONFIGURA√á√ÉO
-- ========================================

-- Verificar se RLS est√° habilitado
SELECT schemaname, tablename, rowsecurity
FROM pg_tables
WHERE tablename = 'notifications';

-- Verificar pol√≠ticas criadas
SELECT policyname, permissive, roles, cmd, qual
FROM pg_policies
WHERE tablename = 'notifications';

-- Verificar √≠ndices criados
SELECT indexname, indexdef
FROM pg_indexes
WHERE tablename = 'notifications'
ORDER BY indexname;

-- Verificar dom√≠nios de notification_type
SELECT id, type, value, description, is_active
FROM domains
WHERE type = 'notification_type'
ORDER BY value;

-- Contar notifica√ß√µes existentes
SELECT 
  audience,
  type,
  is_read,
  COUNT(*) as total
FROM notifications
GROUP BY audience, type, is_read
ORDER BY audience, type, is_read;

-- ========================================
-- üéâ CONFIGURA√á√ÉO COMPLETA!
-- ========================================
-- 
-- Pr√≥ximos passos:
-- 1. Verifique se o Realtime est√° habilitado na tabela
-- 2. Teste criando uma notifica√ß√£o manualmente
-- 3. Abra o frontend e veja a notifica√ß√£o aparecer em tempo real
-- 4. Integre notifica√ß√µes nos fluxos do sistema (feedbacks, avalia√ß√µes, etc.)
-- 
-- Documenta√ß√£o completa em:
-- - docs/NOTIFICATIONS_SYSTEM.md
-- - docs/NOTIFICATIONS_INTEGRATION_EXAMPLE.md
-- ========================================
