// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(EMPLOYEE)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  allocations Allocation[]
  skills      UserSkill[]
  projects    ProjectMember[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNED)
  priority    Priority @default(MEDIUM)
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  allocations Allocation[]
  members     ProjectMember[]
  tasks       Task[]

  @@map("projects")
}

model Employee {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeCode String   @unique
  department   String?
  position     String?
  hourlyRate   Float?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations  Allocation[]
  skills       EmployeeSkill[]

  @@map("employees")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userSkills     UserSkill[]
  employeeSkills EmployeeSkill[]

  @@map("skills")
}

model UserSkill {
  id       String @id @default(cuid())
  userId   String
  skillId  String
  level    SkillLevel @default(BEGINNER)
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model EmployeeSkill {
  id         String @id @default(cuid())
  employeeId String
  skillId    String
  level      SkillLevel @default(BEGINNER)
  createdAt  DateTime @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skill    Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([employeeId, skillId])
  @@map("employee_skills")
}

model ProjectMember {
  id        String @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  estimatedHours Float?
  actualHours    Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  allocations Allocation[]

  @@map("tasks")
}

model Allocation {
  id         String @id @default(cuid())
  employeeId String
  projectId  String
  taskId     String?
  weekStart  DateTime
  weekEnd    DateTime
  hours      Float
  status     AllocationStatus @default(PLANNED)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("allocations")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum AllocationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProjectRole {
  LEADER
  MEMBER
  OBSERVER
} 