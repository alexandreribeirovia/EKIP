// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(EMPLOYEE)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  allocations Allocation[]
  skills      UserSkill[]
  projects    ProjectMember[]
  Employee    Employee?

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNED)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  allocations Allocation[]
  members     ProjectMember[]
  tasks       Task[]

  @@map("projects")
}

model Employee {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeCode String   @unique
  department   String?
  position     String?
  hourlyRate   Float?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations Allocation[]
  skills      EmployeeSkill[]

  @@map("employees")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userSkills     UserSkill[]
  employeeSkills EmployeeSkill[]

  @@map("skills")
}

model UserSkill {
  id        String     @id @default(cuid())
  userId    String
  skillId   String
  level     SkillLevel @default(BEGINNER)
  createdAt DateTime   @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@map("user_skills")
}

model EmployeeSkill {
  id         String     @id @default(cuid())
  employeeId String
  skillId    String
  level      SkillLevel @default(BEGINNER)
  createdAt  DateTime   @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skill    Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([employeeId, skillId])
  @@map("employee_skills")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id             String     @id @default(cuid())
  projectId      String
  name           String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  estimatedHours Float?
  actualHours    Float?
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  allocations Allocation[]

  @@map("tasks")
}

model Allocation {
  id         String           @id @default(cuid())
  employeeId String
  projectId  String
  taskId     String?
  weekStart  DateTime
  weekEnd    DateTime
  hours      Float
  status     AllocationStatus @default(PLANNED)
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?

  @@map("allocations")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum AllocationStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProjectRole {
  LEADER
  MEMBER
  OBSERVER
}

// ===================================
// TABELAS DO SUPABASE (Avaliações)
// ===================================

model EvaluationsModel {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")

  // Relations
  evaluations         Evaluation[]
  evaluationQuestions EvaluationsQuestionsModel[]

  @@map("evaluations_model")
}

model Evaluation {
  id                BigInt   @id @default(autoincrement())
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  evaluationModelId BigInt   @map("evaluation_model_id")
  name              String   @db.VarChar
  userId            String   @map("user_id") @db.VarChar
  userName          String   @map("user_name") @db.VarChar
  ownerId           String   @map("owner_id") @db.VarChar
  ownerName         String   @map("owner_name") @db.VarChar
  periodStart       DateTime @map("period_start") @db.Date
  periodEnd         DateTime @map("period_end") @db.Date
  statusId          BigInt?  @map("status_id")
  isDone            Boolean  @default(false) @map("is_done")
  isClosed          Boolean  @default(false) @map("is_closed")

  // Relations
  evaluationModel EvaluationsModel            @relation(fields: [evaluationModelId], references: [id])
  projects        EvaluationsProjects[]
  questionReplies EvaluationsQuestionsReply[]

  @@map("evaluations")
}

model EvaluationsProjects {
  id           BigInt   @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  evaluationId BigInt   @map("evaluation_id")
  projectId    BigInt   @map("project_id")

  // Relations
  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@map("evaluations_projects")
}

model QuestionsModel {
  id            BigInt   @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  question      String   @db.Text
  description   String?  @db.Text
  categoryId    BigInt   @map("category_id")
  subcategoryId BigInt?  @map("subcategory_id")
  replyTypeId   BigInt   @map("reply_type_id")
  weight        Int      @default(1)
  required      Boolean  @default(true)

  // Relations
  evaluationQuestions EvaluationsQuestionsModel[]

  @@map("questions_model")
}

model EvaluationsQuestionsModel {
  id               BigInt   @id @default(autoincrement())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  evaluationId     BigInt   @map("evaluation_id")
  questionId       BigInt   @map("question_id")
  categoryOrder    Int      @map("category_order")
  questionOrder    Int      @map("question_order")
  subcategoryOrder Int      @map("subcategory_order")

  // Relations
  evaluationModel EvaluationsModel @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  question        QuestionsModel   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("evaluations_questions_model")
}

model EvaluationsQuestionsReply {
  id            BigInt   @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  evaluationId  BigInt   @map("evaluation_id")
  questionId    BigInt   @map("question_id")
  categoryId    BigInt?  @map("category_id")
  subcategoryId BigInt?  @map("subcategory_id")
  category      String?  @db.VarChar
  subcategory   String?  @db.VarChar
  question      String   @db.Text
  score         Int?
  reply         String?  @db.Text
  yesNo         Boolean? @map("yes_no")
  weight        Int      @default(1)
  replyType     String   @map("reply_type") @db.VarChar
  userId        String?  @map("user_id") @db.VarChar
  ownerId       String?  @map("owner_id") @db.VarChar

  // Relations
  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@map("evaluations_questions_reply")
}

model Domain {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  type      String   @db.VarChar
  value     String   @db.VarChar
  isActive  Boolean  @default(true) @map("is_active")
  parentId  BigInt?  @map("parent_id")

  @@map("domains")
}
